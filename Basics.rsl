scheme  Basics =
class
  type 
      Person = Text, 
      Family = Person-set,
      Families = Family-set,
      Table = Person-set, 
      Plan = Table-set 
    
  value 
     areRelatives : Person >< Person >< Families -> Bool 
     areRelatives(p1, p2, fs) is if exists f : Family :- f isin fs /\ p1 isin f /\ p2 isin f /\ p1 ~= p2 then true else false end,
     
     isWellformed : Families -> Bool                  
     isWellformed(fs) is let fx: Family :- fx isin fs, fy: Family :- fy isin fs in (fx inter fy = {} /\ fx ~=fy) end,

     isCorrectPlan : Plan >< Families -> Bool
     isCorrectPlan(pl, fs) is let t: Table :- t isin pl, p1 : Person :- p1 isin t, p2 : Person :- p2 isin t in ~areRelatives(p1, p2, fs) end
end