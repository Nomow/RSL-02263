Basics

scheme Design =
extend Basics with 
class
  value

    plan: Families -~-> Plan
    plan(fs) is recPlan(fs, fs, {}),

    recPlan: Families >< Families >< Plan -~-> Plan
    recPlan(originalFamilies, fs, p) is if fs = {} then
				        p
				  elsif fs = {{}} union fs \ {hd(fs)} then
					recPlan(originalFamilies, fs \ {hd(fs)}, p)
				  else
					recPlan(originalFamilies, fs \ {hd(fs)} union {hd(fs)\{hd(hd(fs))}}, addToPlan(originalFamilies, hd(hd(fs)), p))
				  end,
    
    addToPlan: Families >< Person >< Plan -~-> Plan
    addToPlan(originalFamilies, person, plan) is  if plan = {}
		      then
		           addToPlan(originalFamilies, person, plan union {{}})
		      elsif containsFamilyMember(originalFamilies, person, hd(plan))
		      then
			   {hd(plan)} union addToPlan(originalFamilies, person, plan\{hd(plan)})
		      else 
			   plan \ {hd(plan)} union {(hd(plan) union {person})}
		      end,

	containsFamilyMember: Families >< Person >< Table -> Bool
	containsFamilyMember(fs, person, table) is (exists p : Person :- p isin table /\ areRelatives(person, p, fs))

end